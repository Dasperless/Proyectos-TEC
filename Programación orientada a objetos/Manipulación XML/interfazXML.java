/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dario.manipulacionxml;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JTextField;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author dario
 */
public class interfazXML extends javax.swing.JFrame {

    protected ArrayList<String> listaProvincias = new ArrayList<>();
    private final String filepath = "./src/main/java/dario/manipulacionxml/archivo.xml";

    /**
     * Creates new form interfazXML
     */
    public interfazXML() {
        initComponents();
        fillCombobox();
        fillModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        fieldProvincias = new javax.swing.JTextField();
        fieldNombrePais = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        fieldAreaPais = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        fieldPoblacionPais = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        crearPais = new javax.swing.JButton();
        AñadirProvincia = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        fieldIdiomaPais = new javax.swing.JTextField();
        comboboxPaises = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        listPaises = new javax.swing.JList<>();
        agregarPaisVecino = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel1.setText("Provincias");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 480, -1, 30));
        jPanel1.add(fieldProvincias, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 520, 360, 40));
        jPanel1.add(fieldNombrePais, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 360, 40));

        jLabel2.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel2.setText("Nombre del País");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        fieldAreaPais.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldAreaPaisKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldAreaPaisKeyTyped(evt);
            }
        });
        jPanel1.add(fieldAreaPais, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 360, 40));

        jLabel3.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel3.setText("Área del país");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, -1, -1));

        fieldPoblacionPais.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldPoblacionPaisKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldPoblacionPaisKeyTyped(evt);
            }
        });
        jPanel1.add(fieldPoblacionPais, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 360, 40));

        jLabel4.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel4.setText("Población");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, -1, -1));

        crearPais.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        crearPais.setText("Crear");
        crearPais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearPaisActionPerformed(evt);
            }
        });
        jPanel1.add(crearPais, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 640, 180, -1));

        AñadirProvincia.setFont(new java.awt.Font("Ubuntu", 1, 14)); // NOI18N
        AñadirProvincia.setText("Añadir provincia");
        AñadirProvincia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AñadirProvinciaActionPerformed(evt);
            }
        });
        jPanel1.add(AñadirProvincia, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 570, -1, -1));

        jLabel5.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel5.setText("Idioma");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, -1, -1));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 30, 10, 520));
        jPanel1.add(fieldIdiomaPais, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, 360, 40));

        comboboxPaises.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboboxPaisesActionPerformed(evt);
            }
        });
        jPanel1.add(comboboxPaises, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 110, 100, -1));

        jScrollPane1.setViewportView(listPaises);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 150, 440, 410));

        agregarPaisVecino.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        agregarPaisVecino.setText("Agregar país vecino");
        agregarPaisVecino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarPaisVecinoActionPerformed(evt);
            }
        });
        jPanel1.add(agregarPaisVecino, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 630, -1, 50));

        jLabel6.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel6.setText("Agregar País Vecino");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 20, -1, -1));

        jLabel7.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel7.setText("Agregar un nuevo país");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, -1, 30));

        jLabel8.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel8.setText("País");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 80, -1, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 996, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 735, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void crearPaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearPaisActionPerformed
        if (validarCampos()) {
            crearXML();
        }
        limpiarCampos();
        fillModel();
        fillCombobox();
    }//GEN-LAST:event_crearPaisActionPerformed

    private void AñadirProvinciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AñadirProvinciaActionPerformed
        if (listaProvincias.contains(fieldProvincias.getText())) {
            System.out.println("Esa provincia ya existe.");
        } else {
            listaProvincias.add(fieldProvincias.getText());
        }
        fieldProvincias.setText("");
    }//GEN-LAST:event_AñadirProvinciaActionPerformed

    private void fieldAreaPaisKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldAreaPaisKeyTyped
        avoidKeyType(evt);
    }//GEN-LAST:event_fieldAreaPaisKeyTyped

    private void fieldAreaPaisKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldAreaPaisKeyReleased
        avoidKeyType(evt);
    }//GEN-LAST:event_fieldAreaPaisKeyReleased

    private void fieldPoblacionPaisKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldPoblacionPaisKeyReleased
        avoidKeyType(evt);
    }//GEN-LAST:event_fieldPoblacionPaisKeyReleased

    private void fieldPoblacionPaisKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldPoblacionPaisKeyTyped
        avoidKeyType(evt);
    }//GEN-LAST:event_fieldPoblacionPaisKeyTyped

    private void comboboxPaisesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxPaisesActionPerformed
        fillModel();
    }//GEN-LAST:event_comboboxPaisesActionPerformed

    private void agregarPaisVecinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarPaisVecinoActionPerformed
        addElement(listPaises.getSelectedValue());
    }//GEN-LAST:event_agregarPaisVecinoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(interfazXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(interfazXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(interfazXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(interfazXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interfazXML().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AñadirProvincia;
    private javax.swing.JButton agregarPaisVecino;
    private javax.swing.JComboBox<String> comboboxPaises;
    private javax.swing.JButton crearPais;
    private javax.swing.JTextField fieldAreaPais;
    private javax.swing.JTextField fieldIdiomaPais;
    private javax.swing.JTextField fieldNombrePais;
    private javax.swing.JTextField fieldPoblacionPais;
    private javax.swing.JTextField fieldProvincias;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList<String> listPaises;
    // End of variables declaration//GEN-END:variables

    private void crearXML() {
        try {
            File newFile = new File(filepath);

            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();

            // elemento raiz
            Document doc = null;
            Element rootElement = null;
            if (newFile.exists()) {
                doc = docBuilder.parse(newFile);
                rootElement = doc.getDocumentElement();
            } else {
                doc = docBuilder.newDocument();
                rootElement = doc.createElement("paises");
                doc.appendChild(rootElement);
            }

            Element pais = doc.createElement("pais");
            rootElement.appendChild(pais);

            // nombre
            Element nombre = doc.createElement("nombre");
            nombre.appendChild(doc.createTextNode(fieldNombrePais.getText()));
            pais.appendChild(nombre);

            // area
            Element area = doc.createElement("area");
            area.appendChild(doc.createTextNode(fieldAreaPais.getText()));
            pais.appendChild(area);

            // poblacion
            Element poblacion = doc.createElement("poblacion");
            poblacion.appendChild(doc.createTextNode(fieldPoblacionPais.getText()));
            pais.appendChild(poblacion);

            // idioma
            Element idioma = doc.createElement("idioma");
            idioma.appendChild(doc.createTextNode(fieldIdiomaPais.getText()));
            pais.appendChild(idioma);

            //provincias
            Element provincias = doc.createElement("provincias");

            for (int i = 0; i < listaProvincias.size(); i++) {
                Element provincia = doc.createElement("provincia");
                provincia.appendChild(doc.createTextNode(listaProvincias.get(i)));
                provincias.appendChild(provincia);
            }
            pais.appendChild(provincias);

            //paises vecinos
            Element paisesVecinos = doc.createElement("paisesVecinos");
            pais.appendChild(paisesVecinos);

            // escribimos el contenido en un archivo .xml
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File(filepath));
            //StreamResult result = new StreamResult(new File("archivo.xml"));

            // Si se quiere mostrar por la consola...
            // StreamResult result = new StreamResult(System.out);
            transformer.transform(source, result);

            System.out.println("Archivo guardado!");

        } catch (ParserConfigurationException | TransformerException | SAXException pce) {
        } catch (IOException ex) {
            Logger.getLogger(interfazXML.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void avoidKeyType(java.awt.event.KeyEvent evt) {
        JTextField field = (JTextField) evt.getSource();
        String text = field.getText();

        if (!toInt(field.getText())) {
            if (text.length() > 0) {
                text = text.substring(0, text.length() - 1);
            }
            field.setText(text);
        }
    }

    private boolean validarCampos() {
        if (fieldNombrePais.getText().equals("")) {
            System.out.println("No se ha ingresado el nombre del país");
        }
        if (fieldAreaPais.getText().equals("")) {
            System.out.println("No se ha ingresado el área del país.");
        }
        if (listaProvincias.isEmpty()) {
            System.out.println("Se debe agregar al menos una provincia");
        }
        if (fieldPoblacionPais.getText().equals("")) {
            System.out.println("No se ha ingresado la población");
        }
        if (fieldIdiomaPais.getText().equals("")) {
            System.out.println("No se ha ingresado el idioma oficial del pais");
        } else {
            return true;
        }
        return false;
    }

    private boolean toInt(String num) {
        try {
            int result = Integer.valueOf(num);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private void limpiarCampos() {
        fieldNombrePais.setText("");
        fieldAreaPais.setText("");
        fieldPoblacionPais.setText("");
        fieldIdiomaPais.setText("");
        listaProvincias.clear();
        fillCombobox();
        fillModel();
    }

    private void fillModel() {
        NodeList listaPaises = getNodeList("nombre");
        String selected = "";
        if (comboboxPaises.getItemCount() > 0) {
            selected = comboboxPaises.getSelectedItem().toString();
        }
        DefaultListModel listModel = new DefaultListModel();
        for (int i = 0; i < listaPaises.getLength(); i++) {
            String nodeName = listaPaises.item(i).getTextContent();
            if (!nodeName.equals(selected)) {
                listModel.addElement(nodeName);
            }
        }
        listPaises.setModel(listModel);
    }

    private NodeList getNodeList(String name) {
        NodeList listaNodos = null;
        try {
            File newFile = new File(filepath);
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(newFile);
            Element rootElement = doc.getDocumentElement();
            listaNodos = rootElement.getElementsByTagName(name);
        } catch (ParserConfigurationException | SAXException | IOException ex) {
            Logger.getLogger(interfazXML.class.getName()).log(Level.SEVERE, null, ex);
        }
        return listaNodos;
    }

    private void fillCombobox() {
        NodeList listaPaises = getNodeList("nombre");
        comboboxPaises.removeAllItems();
        for (int i = 0; i < listaPaises.getLength(); i++) {
            comboboxPaises.addItem(listaPaises.item(i).getTextContent());
        }
    }

    private void addElement(String tag) {
        try {
            File newFile = new File(filepath);

            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();

            Document doc = docBuilder.parse(newFile);
            NodeList listaPaises = doc.getElementsByTagName("pais");
            NodeList listaNombresPaises = doc.getElementsByTagName("nombre");
            NodeList listaPaisesVecinos = doc.getElementsByTagName("paisesVecinos");
            for (int i = 0; i < listaPaises.getLength(); i++) {
                if (listaNombresPaises.item(i).getTextContent().equals(tag)) {
                    Element pais = doc.createElement("paisVecino");
                    pais.appendChild(doc.createTextNode(tag));
                    listaPaisesVecinos.item(i).appendChild(pais);
                }
            }
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File(filepath));
            transformer.transform(source, result);

        } catch (ParserConfigurationException | SAXException | IOException | TransformerException ex) {
            Logger.getLogger(interfazXML.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("Se añadio un nuevo pais vecino");
    }
    
}
